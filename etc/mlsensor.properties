
mlsensor.apmon.destinations = localhost:56884

############### Format of the data to send #############################
# cluster name to send the data to
# Can be any name, the same for all machines in a cluster
cluster.name=MLSensor

# enable an extra suffix for cluster names
# AliEnFilter creates aggregated values for all clusters ending in _Nodes
cluster.name.suffix.enabled=true
cluster.name.suffix=_Nodes

# if the FQDN cannot be determined or is the wrong one override it with this option
#node.name=<defaults to fqdn of localhost>

# append a module-dependent cluster name suffix
cluster.name.dynamic=true


################ Logging configuration ##################################
##
## How much logging info
## MIN is .level = OFF
## MAX is .level = ALL
##
## Other values for this parameter can be: SEVERE, WARNING, CONFIG, INFO, FINE, FINER, FINEST
## Please notice that the last two options are used only for debugging and generates large
## output!
##
##
## this option is better to be left as it is. Please notice the dot before level .
.level = OFF
lia.level = INFO
mlsensor.level = INFO

###
#monDiskIOStat config section
###
monDiskIOStat.configFile=${MLSENSOR_HOME}/etc/mlsensor.properties

#allowedDevices=
#deniedDevices=

################ Advanced logging ( 'logrotate' style )###########################
##
## If you wold like to enable MonALISA to "logrotate" it's logs
## please comment the upper 3 lines and uncomment the following ones
##
## This will create 4 files that will be logrotated, after reaching
## the size limit
##
handlers= java.util.logging.FileHandler
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# File size in bytes!
java.util.logging.FileHandler.limit = 1000000

#Number of files used in cycle through
java.util.logging.FileHandler.count = 4

#Whether should append at the end of a file log or start with a new one
java.util.logging.FileHandler.append = true
java.util.logging.FileHandler.pattern = MLSensor%g.log

## logging to stdout and stderr options
## MonaLisa uses standard logging included since java 1.4
# handlers= java.util.logging.ConsoleHandler
# java.util.logging.ConsoleHandler.level = FINEST
# java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
